# in this section, try to use conventions to find the patterns and simplify the logic
# but in this section, for loops for logic blocks are not included
# use the best prediction for the time being, but multiple predictions may be included
# try to eliminate containers like 2dmap

instance_input = '138', '69'

var[0] = 2dmap(default)
var[1] = var[0].add_horizontal(input[0])
var[2] = var[0].add_horizontal(input[1])
var[0].align(0, var[1], horizontal, right)

var[3] = call('find the sum of two single digit numbers',  # block type 1
    input[0].'value'[!0], input[1].'value'[!0])
suppose var[3] == '17'

var[0].element[5] = (var[1].'value'[0], 3, down)           # block type 2
var[0].element[6] = (var[1].'value'[1], 4, down)

var[4] = call('find the sum of two single digit numbers',  # block type 1
    input[0].'value'[!1], input[1].'value'[!1])
suppose var[4] == '9'

var[5] = call('find the sum of two single digit numbers', var[4],  #block type 3
    var[3].'value'[0])
suppose var[5] == '10'

var[0].element[7] = (var[5].'value'[0], 0, down, 5, left)       # block type 2
var[0].element[8] = (var[5].'value'[1], 3, down, 6, left)

do{var[6] = call('find the sum of two single digit numbers',   # block type 3
    input[0].'value'[0], var[5].'value'[0])}
because{var[0].find(0, down, 3, left) == None}
suppose var[6] == '2'

var[0].element[9] = var[6].'value'[0]                              # block type 2
var[0].element[9].add_pos(0, down)
var[0].element[9].add_pos(8, left)

var[7] = 'number'(default)                                         #block type 4
var[6].'value'[!0] = var[3].'value'[!0]
var[6].'value'[!1] = var[5].'value'[!0]
var[6].'value'[!2] = var[6].'value'[!0]

return var[7]