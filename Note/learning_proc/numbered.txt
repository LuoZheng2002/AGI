# header

5(assign) 3(reg) 0(index of reg) 9(knowledge_type) 1('number')

12(for) 0(index of iterator)
11(constexpr) 0(starting value)
10(expr) 19(expr_size)
{
    6(syscall) 9('max')
    10(expr) 15(expr_size)
    {
        8(system_type) 1('array') 2(sizeof array)
        10(expr) (expr_size)
        {
            1(input) 0(index of input) (size)
        }
        10(expr) (expr_size)
        {
            1(input) 0(index of input) (size)
        }
    }
}
9(line count in the for loop)

13(if)
10(expr) 34(expr_size)
{
    6(syscall) 7('and')
    10(expr) 14(expr_size)
    {
        6(syscall) 5('<')
        10(expr) 2(expr_size)
        {
            4(iterator) 0(index of iterator)
        }
        10(expr) 6(expr_size)
        {
            1(input) 0(index of input) (size)
        }
    }
    10(expr) 14(expr_size)
    {
        6(syscall) 5('<')
        10(expr) 2(expr_size)
        {
            4(iterator) 0(index of iterator)
        }
        10(expr) 6(expr_size)
        {
            1(input) 1(index of input) (size)
        }
    }
}
1(line count in if statement)

5(assign) 3(reg) 1(index of reg)
10(expr) 2(expr_size)
{
    4(iterator) 0(index of iterator)
}
10(expr) (expr_size)
{
    7(call) 1('find the sum of two single digit numbers')
    10(expr) (expr_size)
    {
        7(call) 2('digit to number')
        10(expr) (expr_size)
        {
            1(input) 0(index of input) 16('at_reverse')
            10(expr) 2(expr_size)
            {
                4(iterator) 0(index of iterator)
            }
        }
    }
    10(expr) (expr_size)
    {
        7(call) 2('digit to number')
        10(expr) (expr_size)
        {
            1(input) 1(index of input) 16('at_reverse')
            10(expr) 2(expr_size)
            {
                4(iterator) 0(index of iterator)
            }
        }
    }
}

13(if)
10(expr) 34(expr_size)
{
    6(syscall) 7('and')
    10(expr) 14(expr_size)
    {
        6(syscall) 5('<')
        10(expr) 2(expr_size)
        {
            4(iterator) 0(index of iterator)
        }
        10(expr) 6(expr_size)
        {
            1(input) 0(index of input) (size)
        }
    }
    10(expr) 14(expr_size)
    {
        6(syscall) 5('>=')
        10(expr) 2(expr_size)
        {
            4(iterator) 0(index of iterator)
        }
        10(expr) 6(expr_size)
        {
            1(input) 1(index of input) (size)
        }
    }
}
1(line count in if statement)

5(assign) 3(reg) 1(index of reg)
10(expr) 2(expr_size)
{
    4(iterator) 0(index of iterator)
}
10(expr) (expr_size)
{
    1(input) 0(index of input) 16('at_reverse')
    10(expr) 2(expr_size)
    {
        4(iterator) 0(index of iterator)
    }
}

13(if)
10(expr) 34(expr_size)
{
    6(syscall) 7('and')
    10(expr) 14(expr_size)
    {
        6(syscall) 5('>=')
        10(expr) 2(expr_size)
        {
            4(iterator) 0(index of iterator)
        }
        10(expr) 6(expr_size)
        {
            1(input) 0(index of input) (size)
        }
    }
    10(expr) 14(expr_size)
    {
        6(syscall) 5('<')
        10(expr) 2(expr_size)
        {
            4(iterator) 0(index of iterator)
        }
        10(expr) 6(expr_size)
        {
            1(input) 1(index of input) (size)
        }
    }
}
1(line count in if statement)

5(assign) 3(reg) 1(index of reg)
10(expr) 2(expr_size)
{
    4(iterator) 0(index of iterator)
}
10(expr) (expr_size)
{
    1(input) 1(index of input) 16('at_reverse')
    10(expr) 2(expr_size)
    {
        4(iterator) 0(index of iterator)
    }
}

13(if)
10(expr) (expr_size)
{
    6(syscall) 7(and)
    10(expr) (expr_size)
    {
        6(syscall) 4('>=')
        10(expr) (expr_size)
        {
            4(iterator) 0(index of iterator)
        }
        11(constexpr) 1(number)
    }
    10(expr) (expr_size)
    {
        6(syscall) 4('>=')
        10(expr) (expr_size)
        {
            3(reg) 1(index of reg)
            10(expr) (expr_size)
            {
                6(syscall) 11('offset')
                10(expr) (expr_size)
                {
                    4(iterator) 0(index of iterator)
                }
                11(constexpr) -1(number)
            }
        }
        11(constexpr) 2(number)
    }
}
1(line count in if statement)

5(assign) 3(reg) 2(index of reg)
10(expr) (expr_size)
{
    4(iterator) 0(index of iterator)
}
10(expr) (expr_size)
{
    7(call) 1('find the sum of two single digit numbers')
    10(expr) (expr_size)
    {
        3(reg) 1(index of reg)
        10(expr) (expr_size)
        {
            4(iterator) 0(index of iterator)
        }
    }
    10(expr) (expr_size)
    {
        7(call) 2('digit to number')
        10(expr) (expr_size)
        {
            3(reg) 1(index of reg)
            10(expr) (expr_size)
            {
                6(syscall) 11('offset')
                10(expr) (expr_size)
                {
                    4(iterator) 0(index of iterator)
                }
                11(constexpr) -1(number)
            }
            16(at_reverse)
            11(constexpr) 1(number)
        }
    }
}

17(else) 1(line count in else statement)

5(assign) 3(reg) 0(index of reg) 16(at_reverse)
10(expr) (expr_size)
{
    4(iterator) 0(index of iterator)
}
10(expr) (expr_size)
{
    3(reg) 2(index of reg)
    10(expr) (expr_size)
    {
        4(iterator) 0(index of iterator)
    }
    16(at_reverse)
    11(constexpr) 0(number)
}

(delete) (reg) 1(number)
(expr) (expr_size)
{
    (iterator) 0(index of iterator)
}

13(if)
10(expr) (expr_size)
{
    (syscall) ('>=')
    (expr) (expr_size)
    {
        3(reg) 2(index of reg)
        (expr) (expr_size)
        {
            (syscall) ('offset')
            (expr) (expr_size)
            {
                6(syscall) 9('max')
                10(expr) 15(expr_size)
                {
                    8(system_type) 1('array') 2(sizeof array)
                    10(expr) (expr_size)
                    {
                        1(input) 0(index of input) (size)
                    }
                    10(expr) (expr_size)
                    {
                        1(input) 0(index of input) (size)
                    }
                }
            }
            (constexpr) -1(number)
        }
        (size)
    }
    (constexpr) 2(number)
}
1(line count in if statement)

(assign) (reg) 0(number) (at_reverse)
(expr) (expr_size)
{
    6(syscall) 9('max')
    10(expr) 15(expr_size)
    {
        8(system_type) 1('array') 2(sizeof array)
        10(expr) (expr_size)
        {
            1(input) 0(index of input) (size)
        }
        10(expr) (expr_size)
        {
            1(input) 0(index of input) (size)
        }
    }
}
(reg) 2(number)
(expr) (expr_size)
{
    (syscall) ('offset')
    (expr) (expr_size)
    {
        6(syscall) 9('max')
        10(expr) 15(expr_size)
        {
            8(system_type) 1('array') 2(sizeof array)
            10(expr) (expr_size)
            {
                1(input) 0(index of input) (size)
            }
            10(expr) (expr_size)
            {
                1(input) 0(index of input) (size)
            }
        }
    }
    (constexpr) -1(number)
}
('at_reverse')
(constexpr) 1(number)

(delete) (reg) 2(number) (all)

(return) (reg) 0(number)